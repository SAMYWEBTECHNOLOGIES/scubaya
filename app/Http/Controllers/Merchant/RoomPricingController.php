<?php

namespace App\Http\Controllers\Merchant;

use App\Scubaya\model\GlobalSetting;
use App\Scubaya\model\MerchantUsersRoles;
use App\Scubaya\model\RoomPricing;
use App\Scubaya\model\RoomPricingSettings;
use App\Scubaya\model\Rooms;
use App\Scubaya\model\RoomTypes;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Validator;

class RoomPricingController extends Controller
{
    private $tariffs;

    private $authUserId ;

    private $defaultPrice       =   100;

    private $defaultMinNights   =   1;

    private $defaultYears       =   2;

    public function __construct()
    {
        $this->middleware('auth');

        $this->middleware(function ($request, $next) {
            if(Auth::user()->is_merchant_user) {
                $this->authUserId   =   MerchantUsersRoles::where('user_id', Auth::id())->value('merchant_id');
            } else {
                $this->authUserId   =   Auth::id();
            }

            return $next($request);
        });
    }

    /* list all the tariffs generated by merchant */
    public function index()
    {
        $tariffs    =   RoomPricing::where('merchant_primary_id', $this->authUserId)->get();
        return view('merchant.hotel.tariff.index')
                ->with('tariffs', $tariffs)
                ->with('sno', 1);
    }

    /* render form for creating tariff */
    public function createTariff(Request $request)
    {
        $roomNames  =   Rooms::select('id', 'name')->where('merchant_primary_id', $this->authUserId)->where('hotel_id', $request->hotel_id)->get();
        $tariffData =   $this->generateManualWrapper();

        $settings   =   (array)json_decode(RoomPricingSettings::where('merchant_primary_id', $this->authUserId)->first());

        return view('merchant.hotel.tariff.create')
            ->with('tariffData', $tariffData)
            ->with('roomNames', $roomNames)
            ->with('hotelId', $request->hotel_id)
            ->with('tariff_mode', $settings ? json_decode($settings['currency']) : null);
    }

    /*
     * fetch default price and min nights from merchant micromanage settings
     * if it has not default values then fetch it from global settings set by admin
     */
    protected function _setTariffDefaultValues()
    {
        $settings   =   (array)json_decode(RoomPricingSettings::where('merchant_primary_id', $this->authUserId)->first());

        if(count($settings) > 0)
        {
            $settings       =   json_decode($settings['currency']);

            if(!empty($settings->micromanage)){
                $settings       =   json_decode($settings->micromanage);

                $this->defaultPrice        =  $settings->default_price;
                $this->defaultMinNights    =  $settings->default_min_nights;
                $this->defaultYears        =  $settings->years_to_show;
            }
        }
        else
        {
            /* fetch from global config set by admin */
            $settings   =   GlobalSetting::where('name', 'like','merchant.hotel_accomodation%')->pluck('value', 'name')->toArray();

            if(count($settings) > 0){
                $this->defaultPrice     =   $settings['merchant.hotel_accomodation.tariff_default_price'];
                $this->defaultMinNights =   $settings['merchant.hotel_accomodation.tariff_default_min_nights'];
                $this->defaultYears     =   $settings['merchant.hotel_accomodation.default_years_to_show'];
            }
        }
    }

    /* generate manual wrapper section */
    public function generateManualWrapper($tarifftype_id = 0)
    {
        $dowInitArrays      = array();
        $today              = getdate();
        $firstYear          = $today['year'];
        $firstMonth         = $today['mon'];
        $todaysepoch        = $today[0];
        $datesInyearsArray  = array();

        $this->_setTariffDefaultValues();

        for ($y = 0; $y < $this->defaultYears; $y++)
        {
            $currYear = $firstYear+$y;

            for ($m = 1; $m <= 12; $m++)
            {
                if ( ($m >= $firstMonth && $currYear ==$firstYear ) || $currYear >$firstYear )
                {
                    $currMonth   = date("m",mktime(0, 0, 0, $m,1,$currYear));
                    $daysInMonth = date("t",mktime(0, 0, 0, $m,1,$currYear));

                    for ($d = 1; $d <= $daysInMonth; $d++)
                    {
                        $day        = date("d",mktime(0, 0, 0, $currMonth,$d,$currYear));
                        $epoch      = mktime(0,0,0,$currMonth,$day,$currYear);
                        $dow        = getdate($epoch);
                        $dayofweek  = $dow['weekday'];
                        $fontcolour = "black";

                        if ($tarifftype_id > 0)
                        {
                            $datesInyearsArray[$currYear][$currMonth][$day]['value'] = $this->getValueForTariffThisDate($epoch);
                            $datesInyearsArray[$currYear][$currMonth][$day]['mindays'] = $this->getMinIntervalForTariffThisDate($epoch);
                        }
                        else
                        {
                            $datesInyearsArray[$currYear][$currMonth][$day]['value'] = $this->defaultPrice;
                            $datesInyearsArray[$currYear][$currMonth][$day]['mindays'] = $this->defaultMinNights;
                        }

                        if ($datesInyearsArray[$currYear][$currMonth][$day]['value'] != $this->defaultPrice)
                            $fontcolour = "red";

                        if ($epoch < $todaysepoch)
                            $fontcolour = "grey";

                        $dowInit = substr($dayofweek,0,2);

                        switch ($dowInit)
                        {
                            case "Su": $dowInit = 'Su'; break;
                            case "Mo": $dowInit = 'Mo'; break;
                            case "Tu": $dowInit = 'Tu'; break;
                            case "We": $dowInit = 'We'; break;
                            case "Th": $dowInit = 'Th'; break;
                            case "Fr": $dowInit = 'Fr'; break;
                            case "Sa": $dowInit = 'Sa'; break;
                        }

                        if ($dayofweek == "Saturday" || $dayofweek == "Sunday")
                            $datesInyearsArray[$currYear][$currMonth][$day]['dom'] = '<font color="'.$fontcolour.'"><b>'.$dowInit.' '.$day.'</b></font>';
                        else
                            $datesInyearsArray[$currYear][$currMonth][$day]['dom'] = '<font color="'.$fontcolour.'">'.$dowInit.' '.$day.'</font>';

                        $datesInyearsArray[$currYear][$currMonth][$day]['class'] = "room_te_".$dowInit;

                        if (!in_array("room_te_".$dowInit,$dowInitArrays) )
                            $dowInitArrays["room_te_".$dowInit] = array("class"=>"room_te_".$dowInit,"text"=>$dowInit,"dom"=>$datesInyearsArray[$currYear][$currMonth][$day]['dom']);

                        $datesInyearsArray[$currYear][$currMonth][$day]['epoch'] = $epoch;
                        $datesInyearsArray[$currYear][$currMonth][$day]['date'] = date("Y-m-d",$epoch);
                    }
                }
            }
        }

        $data   =   [
            'default_price'     =>  $this->defaultPrice,
            'default_min_nights'=>  $this->defaultMinNights,
            'dowInitArrays'     =>  $this->_generateAutoFillButtonsAndInputs($dowInitArrays, $tarifftype_id),
            'datesInYearsArray' =>  $this->_prepareHtmlForManualWrapper($datesInyearsArray)
        ];

        return $data;
    }

    /* generate auto fills buttons and inputs */
    protected function _generateAutoFillButtonsAndInputs($dowInitArrays, $tarifftype_id)
    {
        $prefills   =   array();
        $rates      =   array();
        $minDays    =   array();

        if($tarifftype_id > 0){
            $tariff   =   (array)json_decode($this->tariffs['additional_tariff_data']);
            $rates    =   (array)json_decode($tariff['micro']->price_per_night_by_day_of_week);
            $minDays  =   (array)json_decode($tariff['micro']->min_nights_by_day_of_week);
        }

        foreach ($dowInitArrays as $dia)
        {
            $p = array();

            $p["BUTTON"] = '
				<input type="button" class="btn btn-default tariff_multi_input margin-bottom-10"  id="'.$dia['class'].'" value="'.$dia['text'].'" onClick="set_rates_by_dow(\''.$dia['class'].'\')" />
				<input type="button" class="btn btn-default mindays_multi_input margin-bottom-10 hidden" id="'.$dia['class'].'" value="'.$dia['text'].'" onClick="set_mindays_by_dow(\''.$dia['class'].'\')"/>
				';

            $p["DOW"]   = $dia['text'];

            $p["INPUT"] = '
                <input class="'.$dia['class'].'_rates  input-sm input-small tariff_multi_input width-40"  type="number" step="any" min="0" name="micro[room_te_rates]['.$dia['text'].']" value="'.$this->defaultPrice.'" />
                <input class="'.$dia['class'].'_mindays input-sm input-small mindays_multi_input width-40 hidden" type="number" step="any" min="0"  name="micro[room_te_mindays]['.$dia['text'].']" value="'.$this->defaultMinNights.'"/>
                ';

            if(count($rates) && count($minDays)){
                $p["INPUT"] = '
                <input class="'.$dia['class'].'_rates  input-sm input-small tariff_multi_input width-40"  type="number" step="any" min="0" name="micro[room_te_rates]['.$dia['text'].']" value="'.$rates[$dia['text']].'" />
                <input class="'.$dia['class'].'_mindays input-sm input-small mindays_multi_input width-40 hidden" type="number" step="any" min="0"  name="micro[room_te_mindays]['.$dia['text'].']" value="'.$minDays[$dia['text']].'"/>
                ';
            }

            $prefills[] = $p;
        }

        return $prefills;
    }

    /* generate html for manual wrapper section */
    protected function _prepareHtmlForManualWrapper($datesInyearsArray)
    {
        $manualWrapperHtml  =   array();
        $price_text         =   'per night';
        $mindays_text       =   'min nights';

        foreach ($datesInyearsArray as $ykey => $y)
        {
            foreach ($y as $mkey => $m)
            {
                $dr=array();
                $dr['YEAR']=$ykey;
                $dr['MONTH']=strftime("%B", strtotime($ykey."-".$mkey."-01"));
                $days1="";
                $inputs1="";
                $days2="";
                $inputs2="";

                foreach ($m as $dkey=>$d)
                {
                    if ($dkey == 1 ) {
                        $days1.='<td>&nbsp;</td>';
                        $inputs1.='
							<td>
								<small class="muted price_title">'. $price_text.'</small>
								<small class="muted min_days_title">'. $mindays_text.'</small>
							</td>';
                    }

                    if ($dkey == 15 ) {
                        $days2.='<td>&nbsp;</td>';
                        $inputs2.='
							<td>
								<small class="muted price_title">'. $price_text.'</small>
								<small class="muted min_days_title">'. $mindays_text.'</small>
							</td>';
                    }

                    if ($dkey <= 15)
                    {
                        $days1.='<td class="setdate"> <span hidden data-date="'.$d['date'].'"></span><div class="btn btn-sm btn-default">'.$d['dom'].'</div></td>';
                        $inputs1.='
							<td>
								<input type="number" class="'.$d['class'].'_rates width-100 input-rate" id="tariffinput_'.$d['epoch'].'" name="micro[tariffinput]['.$d['epoch'].']" value="'.$d['value'].'" />
								<input type="number" class="'.$d['class'].'_mindays input-mini width-100 input-min-days" id="mindaysinput_'.$d['epoch'].'" name="micro[mindaysinput]['.$d['epoch'].']" value="'.$d['mindays'].'" />
							</td>';
                    }
                    else
                    {
                        $days2.='<td class="setdate"> <span hidden data-date="'.$d['date'].'"></span><div class="btn btn-sm btn-default">'.$d['dom'].'</div></td>';
                        $inputs2.='
							<td>
								<input type="number" class="'.$d['class'].'_rates input-mini width-100 input-rate" id="tariffinput_'.$d['epoch'].'" name="micro[tariffinput]['.$d['epoch'].']" value="'.$d['value'].'" />
								<input type="number" class="'.$d['class'].'_mindays input-mini  width-100 input-min-days" id="mindaysinput_'.$d['epoch'].'" name="micro[mindaysinput]['.$d['epoch'].']" value="'.$d['mindays'].'" />
							</td>';
                    }
                }

                $dr['DAYS1']    =   $days1;
                $dr['INPUTS1']  =   $inputs1;
                $dr['DAYS2']    =   $days2;
                $dr['INPUTS2']  =   $inputs2;

                $manualWrapperHtml[]    =   $dr;
            }
        }
        return $manualWrapperHtml;
    }

    public function getValueForTariffThisDate($epoch)
    {
        $tariff             =   (array)json_decode($this->tariffs['additional_tariff_data']);
        $price_per_night    =   (array)json_decode(($tariff['micro'])->price_per_night_manually);

        foreach($price_per_night as $key => $value){
            if($key == $epoch)
                return $value;
        }

        return false;
    }

    public function getMinIntervalForTariffThisDate($epoch)
    {
        $tariff        =   (array)json_decode($this->tariffs['additional_tariff_data']);
        $min_nights    =   (array)json_decode(($tariff['micro'])->min_nights_manually);

        foreach($min_nights as $key => $value){
            if($key == $epoch)
                return $value;
        }

        return false;
    }

    /*
     * prepare and return room tariff data to save
     * or update before further processing
     */
    protected function _prepareMicroData($request)
    {
        $tariff                 =   new \stdClass();
        $additionalTariffData   =   array();

        $tariff->merchant_primary_id               =   $this->authUserId;
        $tariff->tariff_title                      =   $request->get('tariff_title');
        $tariff->tariff_description                =   $request->input('tariff_description');
        $tariff->room_id                           =   $request->get('room');

        $additionalTariffData['micro']   =   [
            'max_people'                        =>  $request->micro['max_people'],
            'min_people'                        =>  $request->micro['min_people'],
            'price_per_night_by_day_of_week'    =>  json_encode($request->micro['room_te_rates']),
            'min_nights_by_day_of_week'         =>  json_encode($request->micro['room_te_mindays']),
            'price_per_night_manually'          =>  json_encode($request->micro['tariffinput']),
            'min_nights_manually'               =>  json_encode($request->micro['mindaysinput']),
            'ignore_pppn'                       =>  $request->micro['ignore_pppn'],
            'allow_weekends'                    =>  $request->micro['allow_weekends'],
            'weekends_only'                     =>  $request->micro['weekends_only'],
        ];

        if($request->micro['start_date'] && $request->micro['end_date']){
            $start_date     =   $request->micro['start_date'];
            $end_date       =   $request->micro['end_date'];

            $price_or_min_nights_by_date_range  =   [
                'start_date'    =>  $start_date,
                'end_date'      =>  $end_date,
                'price'         =>  $request->micro['picker_rate_value'],
                'min_nights'    =>  $request->micro['picker_mindays_value']
            ];

            $additionalTariffData['micro']['price_or_min_nights_by_date_range']  =   json_encode($price_or_min_nights_by_date_range);
        }

        $tariff->additional_tariff_data    =   json_encode($additionalTariffData);

        return $tariff;
    }

    protected function _prepareNormalData($request)
    {
        $tariff                 =   new \stdClass();
        $additionalTariffData   =   array();

        $tariff->merchant_primary_id               =   $this->authUserId;
        $tariff->tariff_title                      =   $request->get('tariff_title');
        $tariff->tariff_description                =   $request->input('tariff_description');
        $tariff->room_id                           =   $request->get('room');

        $additionalTariffData['normal'] =   [
            'no_of_rooms'               =>  $request->normal['no_of_rooms'],
            'rate'                      =>  $request->normal['rate'],
            'min_people'                =>  $request->normal['min_people'],
            'max_people'                =>  $request->normal['max_people'],
            'max_people_in_booking'     =>  $request->normal['max_people_in_booking'],
        ];

        $tariff->additional_tariff_data    =   json_encode($additionalTariffData);

        return $tariff;
    }

    protected function _prepareAdvanceData($request)
    {
        $tariff                 =   new \stdClass();
        $additionalTariffData   =   array();

        $tariff->merchant_primary_id               =   $this->authUserId;
        $tariff->tariff_title                      =   $request->get('tariff_title');
        $tariff->tariff_description                =   $request->get('tariff_description');
        $tariff->room_id                           =   $request->get('room');

        $additionalTariffData['advance'] =   [
            'rate'              =>  $request->advance['rate'],
            'min_rooms'         =>  $request->advance['min_rooms'],
            'min_days'          =>  $request->advance['min_days'],
            'max_days'          =>  $request->advance['max_days'],
            'min_people'        =>  $request->advance['min_people'],
            'max_people'        =>  $request->advance['max_people'],
            'valid_from'        =>  $request->advance['valid_from'],
            'valid_to'          =>  $request->advance['valid_to'],
            'check_in_day'      =>  $request->advance['check_in_day'],
            'ignore_pppn'       =>  $request->advance['ignore_pppn'],
            'allow_weekends'    =>  $request->advance['allow_weekends'],
            'weekends_only'     =>  $request->advance['weekends_only'],
        ];

        $tariff->additional_tariff_data    =   json_encode($additionalTariffData);

        return $tariff;
    }

    /* save room tariff  */
    public function saveTariff(Request $request)
    {
        $this->validate($request, [
            'tariff_title'          =>  'required',
            'room'                  =>  'required',
            'tariff_description'    =>  'required'
        ]);

        // prepare micro tariff data if tariff mode is micromanage
        if($request->get('micro')){
            $tariffData =   $this->_prepareMicroData($request);
        }

        // prepare normal tariff data if tariff mode is normal
        if($request->get('normal')){
            $tariffData =   $this->_prepareNormalData($request);
        }

        // prepare advance tariff data if tariff mode is advance
        if($request->get('advance')){
            $tariffData =   $this->_prepareAdvanceData($request);
        }

        RoomPricing::savePricing($tariffData);

        return Redirect::to(route('scubaya::merchant::all_rooms',[Auth::id(), $request->hotel_id]));
    }

    /* edit room tariff */
    public function editTariff(Request $request)
    {
        $this->tariffs      =   RoomPricing::find($request->tariff_id);
        $roomNames          =   Rooms::select('id', 'name')->where('merchant_primary_id', $this->authUserId)->where('hotel_id', $request->hotel_id)->get();

        $additionalTariffData    =   (array)json_decode($this->tariffs['additional_tariff_data']);

        if(key($additionalTariffData) == 'micro'){
            $tariffData             =   $this->generateManualWrapper($this->tariffs['id']);
        }

        return view('merchant.hotel.tariff.edit')
                ->with('tariffs', $this->tariffs)
                ->with('tariff_mode', key($additionalTariffData))
                ->with('roomNames', $roomNames)
                ->with('tariffData', !empty($tariffData) ? $tariffData : null)
                ->with('hotelId', $request->hotel_id);
    }

    /* save updated tariff data to database */
    public function updateTariff(Request $request)
    {
        /* TODO: apply validation */
        $this->validate($request, [
            'tariff_title'          =>  'required',
            'room'                  =>  'required',
            'tariff_description'    =>  'required'
        ]);

        // prepare micro tariff data if tariff mode is micromanage
        if($request->get('micro')){
            $tariffData =   $this->_prepareMicroData($request);
        }

        // prepare normal tariff data if tariff mode is normal
        if($request->get('normal')){
            $tariffData =   $this->_prepareNormalData($request);
        }

        // prepare advance tariff data if tariff mode is advance
        if($request->get('advance')){
            $tariffData =   $this->_prepareAdvanceData($request);
        }

        RoomPricing::updatePricing($request->tariff_id, $tariffData);

        return Redirect::to(route('scubaya::merchant::all_rooms',[Auth::id(), $request->hotel_id]));
    }

    /* delete room tariff */
    public function deleteTariff(Request $request)
    {
        RoomPricing::destroy($request->tariff_id);
        return Redirect::to(route('scubaya::merchant::all_rooms',[Auth::id(), $request->hotel_id]));
    }
}
